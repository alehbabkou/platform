version: "3"

networks:
  prodnetwork:
    driver: bridge

services:
 nexus:
  build: ./nexus
  ports:
    - "18081:8081"
  networks:
    - prodnetwork
  volumes: 
    - /opt/nexus3/:/var/lib/nexus3/
    - /opt/sonatype/nexus/
    - /opt/sonatype/sonatype-work/
    - /opt/sonatype/sonatype-work/nexus3/
    - /nexus-data:/nexus-data

 jenkins:
  build: ./jenkins
  ports:
    - "18080:8080"
  networks:
    - prodnetwork
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
   # - /usr/local/bin/docker:/usr/bin/docker
    - /opt/jenkins/:/var/lib/jenkins/
  depends_on:
    - nexus
    - gitlab
    - sonar
  environment:
    - NEXUS_PORT=8081
    - SONAR_PORT=9000
    - SONAR_DB_PORT=5432

 sonar:
  build: ./sonar
  ports:
   - "19000:9000"
   - "5432:5432"
  networks:
    - prodnetwork
  depends_on:
    - sonardb
  environment:
   - SONARQUBE_JDBC_URL=jdbc:postgresql://sonardb:5432/sonar
   - SONARQUBE_JDBC_USERNAME=sonar
   - SONARQUBE_JDBC_PASSWORD=sonar
 sonardb:
  networks:
    - prodnetwork
  image: postgres
  environment:
   - POSTGRES_USER=sonar
   - POSTGRES_PASSWORD=sonar
  volumes:
    - /opt/postgres/data:/var/lib/postgresql/data

###Gitlab###

 gitlab:
   image: gitlab/gitlab-ce:latest
   restart: always
   hostname: '35.202.143.0'
   environment:
    GITLAB_OMNIBUS_CONFIG: |
      external_url 'http://35.202.143.0:80'
   networks:
    - prodnetwork
  # GITLAB_OMNIBUS_CONFIG: |
      # external_url 'https://gitlab.example.com'
      # Add any other gitlab.rb configuration here, each on its own line
  # environment:
   #  - VIRTUAL_HOST=sub.domain.com
   links:
     - postgresqlgitlab:postgres
     - redisgitlab:redis
   ports:
    - "80:80"
    - "443:443"
    - "2222:22"
   volumes:
    - /opt/gitlab/config:/etc/gitlab
    - /opt/gitlab/logs:/var/log/gitlab
    - /opt/gitlab/data:/var/opt/gitlab

 postgresqlgitlab:
   image: postgres
   networks:
    - prodnetwork
   ports:
    - "45432:5432"
   environment:
     - POSTGRES_USER=gitlab
     - POSTGRES_PASSWORD=gitlab
     - DB_NAME=gitlabhq_production
   volumes:
     - /opt/gitlab/postgresql:/var/lib/postgresql

 redisgitlab:
   image: redis:latest
   networks:
    - prodnetwork
   volumes:
     - /opt/gitlab/redis:/var/lib/redis

###ELK Stack###

 elasticsearch:
    build: ./elasticsearch
    restart: always
    volumes:
      - /opt/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - prodnetwork

 logstash:
    build: ./logstash
    restart: always
#    command: logstash -f /conf/logstash.conf
    volumes:
      - /opt/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
 #     - /opt/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5001:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - prodnetwork
    depends_on:
      - elasticsearch

 kibana:
    build: ./kibana
    restart: always
    volumes:
      - /opt/kibana/config/:/usr/share/kibana/config
    ports:
      - "5601:5601"
    networks:
      - prodnetwork
    depends_on:
      - elasticsearch

###Selenium Stack###

 selenium-hub:
  container_name: selenium-hub
  restart: always
  image: selenium/hub:2.53.0
  networks:
    - prodnetwork
  expose:
    - "4444"
  ports:
    - "4444:4444"

 selenium-node-chrome:
  container_name: selenium-node-chrome
  restart: always
  image: selenium/node-chrome:2.53.0
  networks:
    - prodnetwork
  environment:
    SE_OPTS: "-nodeConfig /var/selenium-config/config-chrome.json"
    REMOTE_HOST: "http://selenium-node-chrome:5555"
    HUB_PORT_4444_TCP_ADDR: "selenium-hub"
    HUB_PORT_4444_TCP_PORT: "4444"

 selenium-node-firefox:
  container_name: selenium-node-firefox
  restart: always
  image: selenium/node-firefox:2.53.0
  networks:
    - prodnetwork
  environment:
    SE_OPTS: "-nodeConfig /var/selenium-config/config-firefox.json"
    REMOTE_HOST: "http://selenium-node-firefox:5555"
    HUB_PORT_4444_TCP_ADDR: "selenium-hub"
    HUB_PORT_4444_TCP_PORT: "4444"

###LDAP###

 ldap:
  container_name: ldap
  restart: always
  #build: ./docker-ldap
  image: osixia/openldap:1.1.9
  hostname: ldap
  networks:
    - prodnetwork
  expose:
    - "389"
  ports:
    - "389:389/tcp"
  #environment:
   # INITIAL_ADMIN_USER: admin.user
   # INITIAL_ADMIN_PASSWORD: admin123
   # JENKINS_PASSWORD: test
   # GERRIT_PASSWORD: ${GERRIT_PWD}
   # SLAPD_PASSWORD: admin123
   # SLAPD_DOMAIN: ldap.example.com
   # SLAPD_FULL_DOMAIN: "dc=ldap,dc=example,dc=com"
  environment:
    - LDAP_READONLY_USER=true
    - LDAP_ORGANISATION=spg
    - LDAP_DOMAIN=spg.by
    - LDAP_ADMIN_PASSWORD=vftm4xsA7Shy7pDs
  entrypoint:
#      - /bin/bash
#      - -c
#      - 'while true; do :;done;'
    - /container/tool/run
    - --copy-service
  cap_add:
    - ALL
  volumes:
    - ./data.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/data.ldif

# ldap-ltb:
#  container_name: ldap-ltb
#  restart: always
#  image: accenture/adop-ldap-ltb:0.1.0
#  networks:
#    - prodnetwork
#  expose:
#    - "801"
#  environment:
#    LDAP_LTB_URL: "ldap:389"
#    LDAP_LTB_DN: "cn=admin,dc=ldap,dc=example,dc=com"
#    LDAP_LTB_PWD: "admin123"
#    LDAP_LTB_BS: "dc=ldap,dc=example,dc=com"

 ldap-phpadmin:
  container_name: ldap-phpadmin
  restart: always
  image: osixia/phpldapadmin:0.7.0
  hostname: admin.ldap.spg.by
  networks:
    - prodnetwork
  links:
    - ldap
  depends_on:
    - ldap
  environment:
    - PHPLDAPADMIN_LDAP_HOSTS=ldap
  expose:
    - "801"
  ports:
    - "801:443"
#  environment:
#    LDAP_SERVER_NAME: "LDAP"
#    LDAP_SERVER_HOST: "ldap"
#    LDAP_SERVER_PORT: "389"
#    LDAP_SERVER_BIND_ID: "cn=admin,dc=ldap,dc=example,dc=com"
#    LDAP_SERVER_BASE_DN: "dc=ldap,dc=example,dc=com"
